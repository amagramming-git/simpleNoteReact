version: 2.1

orbs:
  node: circleci/node@4.7
  aws-ecr: circleci/aws-ecr@7.2.0
  aws-eks: circleci/aws-eks@1.1.0
  kubernetes: circleci/kubernetes@0.12.0
  aws-cli: circleci/aws-cli@2.0

jobs:
  build-and-test:
    docker:
      - image: cimg/node:12.16
    steps:
      - checkout
      - node/install-packages:
          # If you are using yarn, change the line below from "npm" to "yarn"
          pkg-manager: npm
      - run:
          command: npm test
  eks-update-container-image:
    docker:
      - image: circleci/python:3
    steps:
      - run: |
          #!/bin/bash -eo pipefail
          if [[ latest == "latest" ]]; then
            # get latest kops release
            KOPS_VERSION=$(curl -s https://api.github.com/repos/kubernetes/kops/releases/latest | grep tag_name | cut -d '"' -f 4)
          else
            KOPS_VERSION=latest
          fi

          PLATFORM="linux"
          if [ -n "$(uname | grep "Darwin")" ]; then
            PLATFORM="darwin"
          fi

          # download kops
          curl -LO https://github.com/kubernetes/kops/releases/download/$KOPS_VERSION/kops-$PLATFORM-amd64

          [ -w /usr/local/bin ] && SUDO="" || SUDO=sudo

          $SUDO chmod +x kops-$PLATFORM-amd64

          $SUDO mv kops-$PLATFORM-amd64 /usr/local/bin/kops
      - run: |
          #!/bin/bash -eo pipefail
          if [[ latest == "latest" ]]; then
            # get latest kubectl release
            KUBECTL_VERSION=$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)
          else
            KUBECTL_VERSION=latest
          fi

          PLATFORM="linux"
          if [ -n "$(uname | grep "Darwin")" ]; then
            PLATFORM="darwin"
          fi

          # download kubectl
          curl -LO https://storage.googleapis.com/kubernetes-release/release/$KUBECTL_VERSION/bin/$PLATFORM/amd64/kubectl

          [ -w /usr/local/bin ] && SUDO="" || SUDO=sudo

          $SUDO chmod +x ./kubectl

          $SUDO mv ./kubectl /usr/local/bin
      - run: |
          #!/bin/bash -eo pipefail
          if which aws-iam-authenticator > /dev/null; then
            echo "AWS IAM Authenticator for Kubernetes is already installed"
            exit 0
          fi

          PLATFORM="linux"
          if [ -n "$(uname | grep "Darwin")" ]; then
            PLATFORM="darwin"
          fi

          RELEASE_TAG=""
          RELEASE_URL="https://api.github.com/repos/kubernetes-sigs/aws-iam-authenticator/releases/latest"

          FILENAME="aws-iam-authenticator"
          VERSION=$(curl -Ls --fail --retry 3 -o /dev/null -w %{url_effective} "https://github.com/kubernetes-sigs/aws-iam-authenticator/releases/latest" | sed 's:.*/::')
          if [ -n "${RELEASE_TAG}" ]; then
            VERSION="${RELEASE_TAG}"
            if [ "${VERSION}" == "v0.3.0" ]; then
              FILENAME="heptio-authenticator-aws"
            fi
          fi

          # extract version number
          VERSION_NUMBER=$(echo $VERSION | cut -c 2-)

          DOWNLOAD_URL="https://github.com/kubernetes-sigs/aws-iam-authenticator/releases/download/${VERSION}/${FILENAME}_${VERSION_NUMBER}_${PLATFORM}_amd64"

          curl -L --fail --retry 3 -o aws-iam-authenticator "$DOWNLOAD_URL"

          chmod +x ./aws-iam-authenticator

          SUDO=""
          if [ $(id -u) -ne 0 ] && which sudo > /dev/null ; then
            SUDO="sudo"
          fi

          $SUDO mv ./aws-iam-authenticator /usr/local/bin/aws-iam-authenticator
      - aws-cli/install
      - run: |
          #!/bin/bash -eo pipefail
          if [ -z "${AWS_PAGER}" ]; then
            echo 'export AWS_PAGER=""' >> $BASH_ENV
            echo "AWS_PAGER is being set to the empty string to disable all output paging for AWS CLI commands."
            echo "You can set the 'disable-aws-pager' parameter to 'false' to disable this behavior."
          fi
      - run: |
          #!/bin/bash -eo pipefail
          CLUSTER_NAME="eks-from-eksctl"
          AWS_REGION=""
          AWS_PROFILE=""
          KUBECONFIG_FILE_PATH=""
          ROLE_ARN=""
          CLUSTER_CONTEXT_ALIAS=""
          DRY_RUN="false"
          VERBOSE="false"
          if [ -n "${CLUSTER_NAME}" ]; then
            set -- "$@" --name "${CLUSTER_NAME}"
          fi
          if [ -n "${AWS_REGION}" ]; then
            set -- "$@" --region "${AWS_REGION}"
          fi
          if [ -n "${AWS_PROFILE}" ]; then
            set -- "$@" --profile "${AWS_PROFILE}"
          fi
          if [ -n "${KUBECONFIG_FILE_PATH}" ]; then
            set -- "$@" --kubeconfig "${KUBECONFIG_FILE_PATH}"
          fi
          if [ -n "${ROLE_ARN}" ]; then
            set -- "$@" --role-arn "${ROLE_ARN}"
          fi
          if [ -n "${CLUSTER_CONTEXT_ALIAS}" ]; then
            set -- "$@" --alias "${CLUSTER_CONTEXT_ALIAS}"
          fi
          if [ "${DRY_RUN}" == "true" ]; then
            set -- "$@" --dry-run
          fi
          if [ "${VERBOSE}" == "true" ]; then
            set -- "$@" --verbose
          fi
          aws eks update-kubeconfig "$@"
      - run: |
          #!/bin/bash -eo pipefail
          RESOURCE_FILE_PATH=""
          RESOURCE_NAME="deployment/react"
          CONTAINER_IMAGE_UPDATES="react=${AWS_ECR_ACCOUNT_URL}/${AWS_ECR_REPO_NAME}:${CIRCLE_SHA1}"
          NAMESPACE="simple-note"
          RECORD="false"
          DRY_RUN="none"
          if [ -n "${RESOURCE_FILE_PATH}" ]; then
            set -- "$@" -f
            set -- "$@" "${RESOURCE_FILE_PATH}"
          elif [ -n "${RESOURCE_NAME}" ]; then
            set -- "$@" "${RESOURCE_NAME}"
          else
            echo "Error: The update-container-image command requires either resource-file-path or resource-name to be specified."
            exit 1
          fi
          if [ -n "${CONTAINER_IMAGE_UPDATES}" ]; then
            set -- "$@" ${CONTAINER_IMAGE_UPDATES}
          fi
          if [ -n "${NAMESPACE}" ]; then
            set -- "$@" --namespace="${NAMESPACE}"
          fi
          set -- "$@" "--record=${RECORD}"
          set -- "$@" "--dry-run=${DRY_RUN}"

          kubectl set image "$@"

workflows:
  sample:
    jobs:
      - build-and-test
      - aws-ecr/build-and-push-image:
          requires:
            - build-and-test
          account-url: AWS_ECR_ACCOUNT_URL
          region: AWS_DEFAULT_REGION
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          path: .
          repo: "${AWS_ECR_REPO_NAME}"
          tag: "${CIRCLE_SHA1}"
          filters:
            branches:
              only:
                - main
      # - aws-eks/update-container-image:
      #     cluster-name: eks-from-eksctl
      #     container-image-updates: "react=${AWS_ECR_ACCOUNT_URL}/${AWS_ECR_REPO_NAME}:${CIRCLE_SHA1}"
      #     resource-name: deployment/react
      #     requires:
      #       - aws-ecr/build-and-push-image
      - eks-update-container-image:
          requires:
            - aws-ecr/build-and-push-image
          filters:
            branches:
              only:
                - main
